/*************************
 * Derek Prince          *
 * Problem Set #5        *
 * Problem 3             *
 * Circuit 1 description *
*************************/

//original formula in SOP form

module circuit_01(y1, x1, x2, x3);
  // outputs
  output y1;
  input x1, x2, x3;

  // Circuit structure
  not (nx1, x1), (nx3, x3);
  //minterms
  and (a, nx1, x2, nx3);
  and (b, nx1, x2, x3);
  and (c, x1, x2, nx3);
  //output/sum
  or (y1, a, b, c);

endmodule // end circuit_01

/*************************
 * Derek Prince          *
 * Problem Set #5        *
 * Problem 3             *
 * Circuit 2 description *
*************************/

// NOR-only logic gate function

module circuit_02(y2, x1, x2, x3);
  // outputs
  output y2;
  input x1, x2, x3;

  // Circuit structure
  not (nx3, x3);
  //maxterms
  nor (a, x1, x2);
  nor (b, x1, x2, nx3);
  //output
  nor (y2, a, b);

endmodule // end circuit_01

/*************************
 * Derek Prince          *
 * Problem Set #5        *
 * Problem 3             *
 * Circuit testbench     *
*************************/

`timescale 1ns/1ns  //why not
module circuit_tb1();

  reg clk;        // clock
  reg[2:0] count; // 3-bit register for inputs
  wire y1;        // output
  wire y2;

  initial begin   // initialize
    clk = 1;
    count = -1;   // so the start value will be 0
  end

  always #5 clk = ~clk; // generate clk (bitwise)
  always @(posedge clk)
    count = count + 1;  // count += 1; ?

  // instantiate citcuit 1 module
  circuit_01 MUT1(y1, count[2], count[1], count[0]);
  // instantiate circuit 2 module
  circuit_02 MUT2(y2, count[2], count[1], count[0]);

endmodule // circuit_tb1
